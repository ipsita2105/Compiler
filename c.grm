structure A = Absyn

%%
%term
     EOF 
   | HEADER
   | LPAREN | RPAREN | LCURLY | RCURLY | LSQUARE | RSQUARE
   | SEMICOLON | COLON | COMMA
   | PLUS | MINUS | MUL | DIV | MOD
   | EQUAL | NOT | TILDA | QUES | DOT
   | PRINT | RECORD | STATIC | RETURN | VOID | BREAK | CONTINUE
   | INT | BOOL | CHAR | TRUE | FALSE
   | IF | ELSE | WHILE | FOR
   | GREATER | LESS | LESSEQUAL | GREATEREQUAL | NOTEQUAL | EQUALEQUAL
   | PLUSEQUAL | MINUSEQUAL | MULEQUAL | DIVEQUAL
   | INCREMENT | DECREMENT
   | OR | AND
   | ID of string
   | NUMCONST of string
   | CHARCONST of string


%nonterm  program of A.program
	| declarationList of A.declaration list
	| declaration of A.declaration
        | varDeclaration of A.varDeclaration
        (*| scopedVarDeclaration of A.scopedVarDeclaration*)
        | varDeclList of A.varDeclInitialize list
        | varDeclInitialize of A.varDeclInitialize
        | varDeclID of A.varDeclID
       (*| scopedTypeSpecifier of A.scopedTypeSpecifier*)
        | typeSpecifier of A.typeSpecifier
       (* | returnTypeSpecifier of A.returnTypeSpecifier*)
        | funDeclaration of A.funDeclaration
        | params of A.paramTypeList list
        | paramList of A.paramTypeList list
        | paramTypeList of A.paramTypeList
(*      | paramIDList of A.paramIDList*)
        | paramID of A.paramID
        | statement of A.statement
        | compoundStmt of A.compoundStmt
        | localDeclarations of A.localDeclarations
        | statementList of A.statement list
        | expressionStmt of A.expressionStmt
        | selectionStmt of A.selectionStmt
        | iterationStmt of A.iterationStmt
        | returnStmt of A.returnStmt
        | breakStmt of A.breakStmt
        | continueStmt of A.continueStmt
        | expression of A.expression
        | simpleExpression of A.simpleExpression
        | andExpression of A.andExpression
        | unaryRelExpression of A.unaryRelExpression
        | relExpression of A.relExpression
        | sumExpression of A.sumExpression
        | term of A.term
        | unaryExpression of A.unaryExpression
        | factor of A.factor
        | mutable of A.mutable
        | immutable of A.immutable
        | call of A.call
        | arg of A.expression list
        | argList of A.expression list
        | constant of A.constant
	| printStmt of A.printStmt
	| printStmtNew of A.simpleExpression list
	| singlePrintStmt of A.simpleExpression list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%left PLUS MINUS
%left MUL DIV MOD
%left QUES

%name Tiger

%%
program :	   HEADER declarationList	 (A.declL (declarationList))

declarationList:      declaration                   ([declaration])
	         |    declarationList declaration   (declarationList@[declaration])

declaration    :   varDeclaration              (A.variableDeclaration (varDeclaration))
	       |   funDeclaration	       (A.functionDeclaration (funDeclaration))


(*************************variable******************************)

varDeclaration : typeSpecifier varDeclList SEMICOLON (A.vDecl (typeSpecifier, varDeclList))


varDeclList : varDeclInitialize                    ([varDeclInitialize])
     |  varDeclList COMMA varDeclInitialize  (varDeclList@[varDeclInitialize])

varDeclInitialize : varDeclID	(A.declOnlyID(varDeclID))
		  | varDeclID EQUAL simpleExpression (A.declAssign (varDeclID, simpleExpression)) 

varDeclID         : ID (A.vID (ID))
		  | ID LSQUARE NUMCONST RSQUARE (A.arrayDecl (ID, NUMCONST))

typeSpecifier :       INT   (A.integer)
		    | BOOL  (A.boolean)
		    | CHAR  (A.character)

(******************************function********************************) 
funDeclaration : typeSpecifier ID LPAREN params RPAREN compoundStmt (A.funReturn (typeSpecifier, ID, params, compoundStmt))
	       | VOID ID LPAREN params RPAREN compoundStmt (A.funVoid (ID, params, compoundStmt))

params :                                 ([])
       | paramList                       (paramList)

paramList : paramTypeList                        ([paramTypeList]) 
	  | paramList COMMA paramTypeList        (paramList@[paramTypeList])

paramTypeList : typeSpecifier paramID (A.parameter (typeSpecifier, paramID))

paramID : ID (A.justID (ID))
	| ID LSQUARE RSQUARE (A.arrayID (ID))

(******************************statement********************************) 

statement : expressionStmt (A.eStatement (expressionStmt))
	  | compoundStmt   (A.cStatement (compoundStmt))
	  | selectionStmt  (A.sStatement (selectionStmt))
	  | iterationStmt  (A.iStatement (iterationStmt))
	  | returnStmt     (A.rStatement (returnStmt))
	  | breakStmt      (A.bStatement (breakStmt))
	  | continueStmt   (A.conStatement (continueStmt))
	  | printStmt      (A.printStatement (printStmt))

compoundStmt : LCURLY localDeclarations statementList RCURLY (A.braceStmt (localDeclarations, statementList))

localDeclarations : localDeclarations varDeclaration (A.ldecls (localDeclarations, varDeclaration))
		  |  (A.emptyldecls)

statementList :  			([])
	      |	statementList statement (statementList@[statement])
	

expressionStmt : expression SEMICOLON (A.sExpression (expression)) 
	       | SEMICOLON (A.semicolon)

selectionStmt : IF LPAREN simpleExpression RPAREN statement (A.IF (simpleExpression, statement))
	      | IF LPAREN simpleExpression RPAREN statement ELSE statement (A.IFELSE (simpleExpression, statement1, statement2))

iterationStmt : WHILE LPAREN simpleExpression RPAREN statement (A.WHILE (simpleExpression, statement))

returnStmt : RETURN SEMICOLON (A.voidReturn)
	   | RETURN expression SEMICOLON (A.returnValue (expression))

breakStmt  : BREAK SEMICOLON (A.BREAK)

continueStmt : CONTINUE SEMICOLON (A.CONTINUE)

singlePrintStmt : PRINT LPAREN simpleExpression printStmtNew             (simpleExpression::printStmtNew)

printStmtNew: 								([])
	    | COMMA simpleExpression printStmtNew			(simpleExpression::printStmtNew)

printStmt: singlePrintStmt RPAREN SEMICOLON					(A.printing (singlePrintStmt))


(******************************expression********************************) 

expression : mutable EQUAL expression       (A.assign (mutable, expression))
	   | mutable PLUSEQUAL expression   (A.assignPlus (mutable, expression))
	   | mutable MINUSEQUAL	expression  (A.assignMinus (mutable, expression))
	   | mutable MULEQUAL expression    (A.assignMul (mutable, expression))
	   | mutable DIVEQUAL expression    (A.assignDiv (mutable, expression))
	   | mutable INCREMENT		    (A.increment (mutable))
	   | mutable DECREMENT              (A.decrement (mutable))
	   | simpleExpression               (A.simpExpression (simpleExpression))

simpleExpression : simpleExpression OR andExpression (A.or (simpleExpression, andExpression))
	         | andExpression (A.no_or (andExpression))

andExpression    : andExpression AND unaryRelExpression (A.andExp (andExpression, unaryRelExpression))
		 | unaryRelExpression (A.uExpr (unaryRelExpression))

unaryRelExpression : NOT unaryRelExpression (A.not (unaryRelExpression))
		   | relExpression (A.rExpr (relExpression))

relExpression: sumExpression LESSEQUAL sumExpression    (A.relExp (sumExpression1, A.LTE, sumExpression2))
	     | sumExpression LESS sumExpression         (A.relExp (sumExpression1, A.LT , sumExpression2)) 
	     | sumExpression GREATER sumExpression      (A.relExp (sumExpression1, A.GT,  sumExpression2))
	     | sumExpression GREATEREQUAL sumExpression (A.relExp (sumExpression1, A.GTE, sumExpression2))
	     | sumExpression EQUALEQUAL sumExpression   (A.relExp (sumExpression1, A.EQ,  sumExpression2))
	     | sumExpression NOTEQUAL sumExpression     (A.relExp (sumExpression1, A.NEQ, sumExpression2))
	     | sumExpression 				(A.noRel  (sumExpression))


sumExpression: sumExpression PLUS term (A.sumExp (sumExpression, A.PLUS, term))
	     | sumExpression MINUS term (A.sumExp (sumExpression, A.MINUS, term))
	     | term (A.onlyTerm (term))

term: term MUL unaryExpression (A.mulExp (term, A.MUL, unaryExpression))
    |term DIV unaryExpression (A.mulExp (term, A.DIV, unaryExpression))
    |term MOD unaryExpression (A.mulExp (term, A.MOD, unaryExpression))
    | unaryExpression (A.nomul (unaryExpression))

unaryExpression: QUES unaryExpression (A.uExp (A.QUES, unaryExpression))
	       | factor (A.fac (factor))

factor: mutable (A.mut (mutable))
      | immutable (A.immut (immutable))

mutable: ID  (A.mID (ID))
       | mutable LSQUARE expression RSQUARE (A.mArray (mutable, expression))
(*       | mutable DOT ID (A.mRecord (mutable, ID))*)

immutable: LPAREN expression RPAREN (A.parans (expression))
         | call (A.imc (call))
	 | constant (A.const (constant))

call: ID LPAREN arg RPAREN (A.callArgs (ID, arg))
    
arg   :                           ([])
      | argList                   (argList)

argList:  expression               ([expression])
       | argList COMMA expression (argList@[expression])

constant: NUMCONST (A.number (NUMCONST))
	| CHARCONST (A.charConst (CHARCONST))
	| TRUE	 (A.true_val)
        | FALSE  (A.false_val)

